// Code generated by MockGen. DO NOT EDIT.
// Source: ./animal.go

// Package mock_Crier is a generated GoMock package.
package mock_Crier

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAnimal is a mock of Animal interface.
type MockAnimal struct {
	ctrl     *gomock.Controller
	recorder *MockAnimalMockRecorder
}

// MockAnimalMockRecorder is the mock recorder for MockAnimal.
type MockAnimalMockRecorder struct {
	mock *MockAnimal
}

// NewMockAnimal creates a new mock instance.
func NewMockAnimal(ctrl *gomock.Controller) *MockAnimal {
	mock := &MockAnimal{ctrl: ctrl}
	mock.recorder = &MockAnimalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnimal) EXPECT() *MockAnimalMockRecorder {
	return m.recorder
}

// Cry mocks base method.
func (m *MockAnimal) Cry() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cry")
	ret0, _ := ret[0].(string)
	return ret0
}

// Cry indicates an expected call of Cry.
func (mr *MockAnimalMockRecorder) Cry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cry", reflect.TypeOf((*MockAnimal)(nil).Cry))
}

// GetName mocks base method.
func (m *MockAnimal) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockAnimalMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockAnimal)(nil).GetName))
}
